pipeline {
    agent any

    // Global options
    options {
        skipStagesAfterUnstable()
        timeout(time: 1, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timestamps()
        disableConcurrentBuilds()
    }

    // Environment variables
    environment {
        PATH = "/opt/homebrew/bin:/usr/local/bin:${env.PATH}"
        MAVEN_OPTS = '-Xmx3072m'
        PROJECT_NAME = 'simple-java-maven-app'
        VERSION = "1.0.${BUILD_NUMBER}"
        REPO_URL = 'https://github.com/codewithgarry/simple-java-maven-app.git'
    }

    // Tools configuration
    tools {
        maven 'M3'
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    // Clean workspace
                    deleteDir()

                    // Clone the repository
                    git branch: 'master',
                        url: env.REPO_URL

                    // Log environment info
                    sh '''
                        echo "PATH = ${PATH}"
                        echo "M2_HOME = ${M2_HOME}"
                        mvn -v
                        java -version
                    '''
                }
            }
        }

        stage('Build') {
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    sh 'mvn -B -DskipTests clean package'
                }
            }
            post {
                success {
                    archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                }
            }
        }

        stage('Test') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh 'mvn test'
                }
            }
            post {
                always {
                    junit testResults: 'target/surefire-reports/*.xml', allowEmptyResults: true
                    jacoco() // Code coverage report if you have JaCoCo configured
                }
            }
        }

        stage('Code Quality') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh 'mvn verify sonar:sonar -Dsonar.skip=${params.SKIP_SONAR ?: false}'
                }
            }
        }

        stage('Deliver') {
            when {
                expression {
                    return env.BRANCH_NAME == 'main' || env.BRANCH_NAME == 'master'
                }
            }
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    sh '''
                        chmod +x ./jenkins/scripts/deliver.sh
                        ./jenkins/scripts/deliver.sh
                    '''
                }
            }
        }

        stage('Deploy') {
            when {
                expression {
                    return env.BRANCH_NAME == 'main' || env.BRANCH_NAME == 'master'
                }
            }
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    echo "Deploying version ${VERSION}"
                    // Add your deployment steps here
                }
            }
        }
    }

    // Post-build actions
    post {
        always {
            // Clean workspace
            cleanWs()
            // Send email notification
            emailext (
                subject: "${PROJECT_NAME} - Build #${BUILD_NUMBER} - ${currentBuild.currentResult}",
                body: """
                    <p>Build Status: ${currentBuild.currentResult}</p>
                    <p>Build Number: ${BUILD_NUMBER}</p>
                    <p>Check console output at <a href="${BUILD_URL}">${BUILD_URL}</a></p>
                """,
                recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']]
            )
        }
        success {
            echo 'Build successful!'
        }
        unstable {
            echo 'Build unstable - check test results and code quality gates'
        }
        failure {
            echo 'Build failed - immediate attention required'
        }
    }
}
